# -*- coding: utf-8 -*-
"""
Created on Wed Dec 21 11:40:05 2016

@author: User
"""
 
import spidev
import time
import os
 
# Open SPI bus
spi = spidev.SpiDev()
spi.open(0,0)
 
# Function to read SPI data from MCP3008 chip
# Channel must be an integer 0-7
def ReadChannel(channel):
  adc = spi.xfer2([1,(8+channel)<<4,0])
  data = ((adc[1]&3) << 8) + adc[2]
  return data
 
# Function to convert data to voltage level,
# rounded to specified number of decimal places.
def ConvertVolts(data,places =2):
  volts = (data * 3.3) / float(1023)
  volts = round(volts,places)
  return volts
 
# Function to calculate temperature from
# TMP36 data, rounded to specified
# number of decimal places.
def ConvertTemp(data,places):
 
  # ADC Value
  # (approx)  Temp  Volts
  #    0      -50    0.00
  #   78      -25    0.25
  #  155        0    0.50
  #  233       25    0.75
  #  310       50    1.00
  #  465      100    1.50
  #  775      200    2.50
  # 1023      280    3.30
 
  temp = ((data * 330)/float(1023))-50
  temp = round(temp,places)
  return temp

# IR sensor conversion
# formula retrieved from http://home.roboticlab.eu/en/sensor/ir_distance
# measures back to the back / middle of the sensor???

# seems to be 1 cm too large all the time

def ConvertDistance(v, places = 2):
  #return round ( 5461 / (data - 17) -2, places)

  # subtracting 1 extra to compensate maybe it's just the hardware???
  #return round ( 5461 / float((data - 17) -3), places)
  #return round ( 5461 / float((data - 17) -2), places)
  #return 13.5/ volts

  return 16.2537 * v**4 - 129.893 * v**3 + 382.268 * v**2 - 512.611 * v + 306.439
 #return 65 * (volts ** -1.10)

 #return (4.104815014 * 10 ** -12) * (x**10) - (7.50448734 * 10 ** -10 ) * (x**9) + (5.754181221*10**-8) * (x**8) - 2.386526798·10-6 x7 + 5.700833884·10-5 x6 - 7.452731288·10-4 x5 + 3.565112317·10-3 x4 + 3.087640411·10-2 x3 - 4.920343313·10-1 x2 + 2.002517114 x + 2.206473192·10-1

# Define sensor channels
# light_channel = 0
# temp_channel  = 1

# --Ryan adding one more channel for the ir sensors
#ir_channel = 2
ir_channel = 0
 
# Define delay between readings
delay = 5

def addUp(items, total = 0):
  """ Our owm summing function because the python one has a memory leak"""

  if len(items) == 0:
      return total
  total += items.pop()
  return addUp(items, total)

def normalize(data, arg, repetitions = 10, result =[]):
  
  if repetitions == 0:
      
      # do not refactor because lists are immutable and addup treats them as stack so length becomes 0
      length = len(result) 

       # in case no reads occur
      if length == 0:
        return 0

      total = addUp(result)
      
      average = total / length
    
      print("sum: ", total,"average: ", average)
      return average
  
  read = data(arg)

  if read >= 0:
    print( "repetitions: ", repetitions, "read: ", read)
    result.append(read)

  return normalize(data, arg, repetitions -1, result)

while True:
 
  # # Read the light sensor data
  # light_level = ReadChannel(light_channel)
  # light_volts = ConvertVolts(light_level,2)
 
  # # Read the temperature sensor data
  # temp_level = ReadChannel(temp_channel)
  # temp_volts = ConvertVolts(temp_level,2)
  # temp       = ConvertTemp(temp_level,2)


  # # --Ryan Read the distance data
  # ir_level = normalize <| ReadChannel$(ir_channel)
  # ir_volts = normalize <| ConvertVolts$(ir_level, 2)
  # distance = normalize <| ConvertDistance$(ir_level, 2)

  # # --Ryan Read the distance data
  # ir_channel2 = ir_channel + 1

  # ir_level2 = normalize <| ReadChannel$(ir_channel2)
  # ir_volts2 = normalize <| ConvertVolts$(ir_level2, 2)
  # distance2 = normalize <| ConvertDistance$(ir_level2, 2)

  # # --Ryan Read the distance data

  # ir_channel3 = ir_channel + 2

  # ir_level3 = normalize <| ReadChannel$(ir_channel3)
  # ir_volts3 = normalize <| ConvertVolts$(ir_level3, 2)
  # distance3 = normalize <| ConvertDistance$(ir_level3, 2)

  #--Ryan Read the distance data
  ir_level = ReadChannel(ir_channel)
  ir_volts = ConvertVolts(ir_level)
  distance =  ConvertDistance(ir_volts)

  # --Ryan Read the distance data
  ir_channel2 = ir_channel + 1

  ir_level2 = ReadChannel(ir_channel2)
  ir_volts2 = ConvertVolts(ir_level2)
  distance2 = ConvertDistance(ir_level2)

  # --Ryan Read the distance data

  ir_channel3 = ir_channel + 2

  ir_level3 = ReadChannel( ir_channel3)
  ir_volts3 = ConvertVolts(ir_level3)
  distance3 = ConvertDistance(ir_level3)

  # # --Ryan Read the distance data
  # ir_level = normalize(ReadChannel, ir_channel)
  # ir_volts = normalize(ConvertVolts, ir_level)
  # distance = normalize(ConvertDistance, ir_level)

  # # --Ryan Read the distance data
  # ir_channel2 = ir_channel + 1

  # ir_level2 = normalize(ReadChannel, ir_channel2)
  # ir_volts2 = normalize(ConvertVolts, ir_level2)
  # distance2 = normalize(ConvertDistance, ir_level2)

  # # --Ryan Read the distance data

  # ir_channel3 = ir_channel + 2

  # ir_level3 = normalize(ReadChannel, ir_channel3)
  # ir_volts3 = normalize(ConvertVolts, ir_level3)
  # distance3 = normalize(ConvertDistance, ir_level3)

  get_time = time.asctime .. time.localtime .. time.time
 
  # Print out results
  print <| "--------------------------------------------"
 # print("Light: {} ({}V)".format(light_level,light_volts))
 # print("Temp : {} ({}V) {} deg C".format(temp_level,temp_volts,temp))
  
  print("Distance : {} ({}V) {} cm".format(ir_level, ir_volts, distance))

  print("Distance2 : {} ({}V) {} cm".format(ir_level2, ir_volts2, distance2))

  print("Distance2 : {} ({}V) {} cm".format(ir_level3, ir_volts3, distance3))
  
  print("Time: {}".format <| get_time())
 
  # Wait before repeating loop
  time.sleep(delay)
